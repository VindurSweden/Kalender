'use server';
/**
 * @fileOverview VisuCal Planformaterar-AI.
 * This AI flow takes a natural language description of a calendar plan
 * (generated by Tolk-AI) and converts it into a structured JSON array of operations.
 * It is designed to be highly precise and should only output JSON.
 *
 * - formatPlan - A function that handles the plan formatting process.
 */

import {ai} from '@/ai/genkit';
import { 
  FormatPlanInputSchema, 
  FormatPlanOutputSchema, 
  type FormatPlanInput, 
  type FormatPlanOutput,
  SingleCalendarOperationSchema
} from '@/ai/schemas';

const formatPlanPrompt = ai.definePrompt({
  name: 'visuCalPlanFormatterPrompt',
  input: {schema: FormatPlanInputSchema},
  output: {schema: FormatPlanOutputSchema},
  model: 'googleai/gemini-1.5-flash-latest',
  config: {
    temperature: 0, 
    topP: 0.1,
     safetySettings: [ 
      { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_ONLY_HIGH' },
      { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_ONLY_HIGH' },
      { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_ONLY_HIGH' },
      { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_ONLY_HIGH' },
    ],
  },
  prompt: `Du är VisuCal Planformaterare, en AI som **ENBART** omvandlar en textbeskrivning av en kalenderplan till en strikt JSON-struktur.
Din uppgift är att följa JSON-schemat exakt. Svara **ENDAST** med JSON-objektet. Inkludera inga förklaringar, inga extra ord, bara JSON.

Dagens datum är: {{currentDate}}. Använd detta som referens om planen innehåller relativa datum som "idag" eller "imorgon" för fälten 'dateQuery' och 'timeQuery' i JSON-outputen.

PLANBESKRIVNING ATT OMVANDLA:
"{{planDescription}}"

JSON-SCHEMA FÖR OUTPUT (SingleCalendarOperationSchema, upprepad i en array för 'operations'):
\`\`\`json
${JSON.stringify(SingleCalendarOperationSchema.jsonSchema(), null, 2)}
\`\`\`
Se till att din output är en array under nyckeln "operations", som i: { "operations": [ ... ] }

VIKTIGT:
- Omvandla textuella datum och tider (t.ex. "imorgon kl 14", "nästa fredag") till strängar i fälten \`dateQuery\` och \`timeQuery\`. Frontend-koden kommer att hantera den slutgiltiga parsningen till faktiska datum/tider.
- Om planbeskrivningen inte kan mappas till några operationer, returnera \`{ "operations": [] }\`.
- Om planbeskrivningen är en fråga (QUERY), ska \`commandType\` vara \`QUERY\` och \`eventIdentifier\` samt \`eventDetails\` ska oftast vara tomma.
- Svara **ENBART** med JSON. Ingen extra text före eller efter.
`,
});

const formatPlanFlow = ai.defineFlow(
  {
    name: 'formatPlanFlow',
    inputSchema: FormatPlanInputSchema,
    outputSchema: FormatPlanOutputSchema,
  },
  async (input: FormatPlanInput): Promise<FormatPlanOutput> => {
    console.log('[Planformaterar-AI Flow] Input to formatter:', JSON.stringify(input, null, 2));
    
    const promptResponse = await formatPlanPrompt(input);
    let output = promptResponse.output;

    console.log('[Planformaterar-AI Flow] Raw structured output from formatterPrompt:', JSON.stringify(output, null, 2));

    if (!output || !output.operations) {
      console.warn('[Planformaterar-AI Flow] Formatter prompt did not return a valid operations array. Input:', input, 'Full response:', promptResponse);
      return { operations: [] }; 
    }
    
    if (!Array.isArray(output.operations)) {
        console.warn('[Planformaterar-AI Flow] Formatter output.operations is not an array. Output:', output);
        return { operations: [] };
    }

    console.log('[Planformaterar-AI Flow] Final formatted plan:', JSON.stringify(output, null, 2));
    return output;
  }
);

export async function formatPlan(input: FormatPlanInput): Promise<FormatPlanOutput> {
  return formatPlanFlow(input);
}
